import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request, jsonify
import threading
import time
from datetime import datetime, timedelta
import json
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
PORT = int(os.getenv('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_MESSAGE_LENGTH = 4096
RATE_LIMIT_MESSAGES = 60  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
RATE_LIMIT_WINDOW = 40  # —Å–µ–∫—É–Ω–¥

# –ö—ç—à –¥–ª—è rate limiting
user_message_times = {}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify({
        "status": "healthy", 
        "bot": "running",
        "timestamp": datetime.now().isoformat(),
        "uptime": get_uptime()
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    return jsonify({"status": "ok"})

@app.route('/stats', methods=['GET'])
def get_stats():
    return jsonify({
        "active_users": len(user_message_times),
        "timestamp": datetime.now().isoformat()
    })

def start_flask():
    try:
        app.run(host='0.0.0.0', port=PORT, debug=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    if hasattr(get_uptime, 'start_time'):
        return str(datetime.now() - get_uptime.start_time)
    get_uptime.start_time = datetime.now()
    return "0:00:00"

def check_rate_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_time = time.time()
    if user_id not in user_message_times:
        user_message_times[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_message_times[user_id] = [
        msg_time for msg_time in user_message_times[user_id] 
        if current_time - msg_time < RATE_LIMIT_WINDOW
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(user_message_times[user_id]) >= RATE_LIMIT_MESSAGES:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_message_times[user_id].append(current_time)
    return True

def sanitize_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'<[^>]+>', '', text)
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    return text[:MAX_MESSAGE_LENGTH]

async def send_admin_notification(context, title, user, additional_info=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_ID:
        return
    
    try:
        message = f"{title}\n\n"
        message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
        message += f"üÜî ID: `{user.id}`\n"
        message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        if additional_info:
            message += f"\n\n{additional_info}"
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await send_admin_notification(
        context, 
        "üÜï **–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!**", 
        user
    )
    
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ë–æ—Ç!**

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:
‚Ä¢ üí≥ **–û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏** (Netflix, Steam, Discord, Spotify –∏ –¥—Ä.)
‚Ä¢ üí∏ **–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã**
‚Ä¢ ‚Çø **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**: BTC, ETH, USDT (TRC20/ERC20)

üìã **–£—Å–ª–æ–≤–∏—è:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 5-15% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª—É–≥–∏
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏", callback_data="payment_cards")],
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="transfers")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏", callback_data="payment_cards")],
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="transfers")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/address - –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
/price - –ü—Ä–∞–π—Å-–ª–∏—Å—Ç

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é
2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –¥–µ—Ç–∞–ª–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ @swiwell - –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
‚Ä¢ @Deadkid - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: 4096 —Å–∏–º–≤–æ–ª–æ–≤
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def address_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /address"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    address_text = """
üè¶ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**

**–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: 1234 5678 9012 3456
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12/25
CVV: 123

**–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫:**
BTC: `bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh`
ETH: `0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6`
USDT (TRC20): `TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É —Å –≤–∞—à–∏–º Telegram ID: `{user_id}`

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è
""".format(user_id=user.id)
    
    await update.message.reply_text(address_text, parse_mode='Markdown')

async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    price_text = """
üí∞ **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥:**

**üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏:**
‚Ä¢ Netflix: $15-50 (–∫–æ–º–∏—Å—Å–∏—è 10%)
‚Ä¢ Steam: $10-100 (–∫–æ–º–∏—Å—Å–∏—è 8%)
‚Ä¢ Discord Nitro: $10-20 (–∫–æ–º–∏—Å—Å–∏—è 12%)
‚Ä¢ Spotify: $10-15 (–∫–æ–º–∏—Å—Å–∏—è 15%)
‚Ä¢ YouTube Premium: $12-18 (–∫–æ–º–∏—Å—Å–∏—è 13%)
‚Ä¢ Twitch Subscriptions: $5-25 (–∫–æ–º–∏—Å—Å–∏—è 11%)

**üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã:**
‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 5-8% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 8-12% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10

**‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**
‚Ä¢ BTC: 3% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ ETH: 4% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ USDT: 2% –∫–æ–º–∏—Å—Å–∏—è

**‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** 10-30 –º–∏–Ω—É—Ç

**üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
"""
    await update.message.reply_text(price_text, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await query.edit_message_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    if query.data == "payment_cards":
        text = """
üí≥ **–û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏:**

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:
‚Ä¢ Netflix Premium
‚Ä¢ Steam Gift Cards
‚Ä¢ Discord Nitro
‚Ä¢ Spotify Premium
‚Ä¢ YouTube Premium
‚Ä¢ Twitch Subscriptions
‚Ä¢ Apple Music
‚Ä¢ Google Play
‚Ä¢ –ò –¥—Ä—É–≥–∏–µ...

–£–∫–∞–∂–∏—Ç–µ:
1. –°–µ—Ä–≤–∏—Å
2. –°—É–º–º—É
3. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏

–ü—Ä–∏–º–µ—Ä: "Netflix Premium, $15, 1 –º–µ—Å—è—Ü"

üîí **–ì–∞—Ä–∞–Ω—Ç–∏–∏:**
‚Ä¢ 100% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
"""
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞—è–≤–∫–µ
        await send_admin_notification(
            context,
            "üí≥ **–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–∞–º–∏!**",
            user
        )
        
    elif query.data == "transfers":
        text = """
üí∏ **–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã:**

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω—ã:
‚Ä¢ üá∫üá∏ –°–®–ê
‚Ä¢ üá™üá∫ –ï–≤—Ä–æ–ø–∞ (–°–ï–ü–ê)
‚Ä¢ üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
‚Ä¢ üá®üá¶ –ö–∞–Ω–∞–¥–∞
‚Ä¢ üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è
‚Ä¢ üá®üá≠ –®–≤–µ–π—Ü–∞—Ä–∏—è

–£–∫–∞–∂–∏—Ç–µ:
1. –°—Ç—Ä–∞–Ω—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è
2. –°—É–º–º—É
3. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è

–ö–æ–º–∏—Å—Å–∏—è: 5-12% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
        await send_admin_notification(
            context,
            "üí∏ **–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥!**",
            user
        )
        
    elif query.data == "crypto":
        text = """
‚Çø **–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:
‚Ä¢ Bitcoin (BTC)
‚Ä¢ Ethereum (ETH)
‚Ä¢ USDT (TRC20/ERC20)
‚Ä¢ USDC (ERC20)
‚Ä¢ BNB (BSC)

–£—Å–ª—É–≥–∏:
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç

–ö–æ–º–∏—Å—Å–∏—è: 2-4%

üîí **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
‚Ä¢ –ù–∏–∑–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
"""
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif query.data == "contact_operator":
        text = """
üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:**

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:

**–û—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:** @swiwell
**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** @Deadkid

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ:
‚Ä¢ –í–∞—à Telegram ID: `{user_id}`
‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
‚Ä¢ –°—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 5-15 –º–∏–Ω—É—Ç

üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
""".format(user_id=user.id)
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
            [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ —Å–≤—è–∑–∏
        await send_admin_notification(
            context,
            "üìû **–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å!**",
            user
        )
        
    elif query.data == "price_list":
        await price_command(update, context)
        
    elif query.data == "back_to_menu":
        await menu_command(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    message_text = sanitize_text(update.message.text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ADMIN_ID and chat_id != ADMIN_ID:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
                     f"üë§ {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
                     f"üÜî ID: `{user.id}`\n"
                     f"üìù –¢–µ–∫—Å—Ç: {message_text}\n"
                     f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in message_text.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥.")
    elif any(word in message_text.lower() for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'price', '–ø—Ä–∞–π—Å']):
        await price_command(update, context)
    elif any(word in message_text.lower() for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
        await help_command(update, context)
    elif any(word in message_text.lower() for word in ['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–∞–¥—Ä–µ—Å', 'address']):
        await address_command(update, context)
    elif any(word in message_text.lower() for word in ['—Å—Ç–∞—Ç—É—Å', 'status']):
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + get_uptime())
    else:
        await update.message.reply_text(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @swiwell"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
    if ADMIN_ID:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ùå **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:**\n\n"
                     f"üîç –î–µ—Ç–∞–ª–∏: {context.error}\n"
                     f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not ADMIN_ID:
        logger.warning("ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=start_flask, daemon=True)
    flask_thread.start()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("address", address_command))
        application.add_handler(CommandHandler("price", price_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å drop_pending_updates –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        logger.info("–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES, 
            drop_pending_updates=True,
            close_loop=False
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)
        main()

if __name__ == '__main__':
    main()

