import os
import logging
import asyncio
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request, jsonify
from datetime import datetime
from crypto_checker import auto_issue_card
from database.supabase_integration import (
    _update_order_status_in_supabase, 
    get_top_wallets,
    _get_user_wallet_data,
    get_or_create_wallet,
    update_wallet_balance,
    add_money_to_wallet,
    create_order,
    get_user_orders,
    get_user_transactions,
    get_all_orders,
    get_stats,
    update_order_status,
    get_order_by_id,
    get_pending_crypto_orders
)


env_path = os.path.join(os.path.dirname(__file__), "..", ".env")
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    print(f"‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ {os.path.basename(__file__)}")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [ADMIN_ID]  # –û–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
OPERATOR_USERNAME = "@myspacehelper"
PORT = int(os.getenv('PORT', 10000))
ENVIRONMENT = os.getenv('ENVIRONMENT', 'local')  # 'local' –∏–ª–∏ 'production'
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '')  # –î–ª—è Render: https://your-app.onrender.com

bot = Bot(token=TELEGRAM_BOT_TOKEN)

print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

# –ö—ç—à –¥–ª—è rate limiting
user_message_times = {}

# –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä–∞
crypto_checker = None


# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_wallet(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    try:
        wallet_data = _get_user_wallet_data(user_id)
        if wallet_data:
            return float(wallet_data["balance"])
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            wallet = get_or_create_wallet(user_id)
            if wallet:
                return float(wallet.get("balance", 0.0))
            return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
        return 0.0


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.error("start_command –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    user = update.effective_user
    user_id = user.id
    balance = get_user_wallet(user_id)

    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPACE PAY!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    keyboard = [
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="catalog")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥  
/wallet - –ú–æ–π –∫–æ—à–µ–ª–µ–∫
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check_payment - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (–∞–¥–º–∏–Ω—ã)

üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã
‚Ä¢ –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏

üí∞ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: @myspacehelper
"""

    await update.message.reply_text(help_text)


async def check_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) —á–µ—Ä–µ–∑ Supabase"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞\n–ü—Ä–∏–º–µ—Ä: /check_payment 123")
        return

    try:
        order_id = int(context.args[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ Supabase
        order = get_order_by_id(order_id)

        if not order:
            await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        user_id_order = order["user_id"]
        service_type = order["service_type"]
        amount = order["amount"]
        status = order["status"]
        description = order["description"]

        if not service_type.startswith('deposit_crypto_'):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            return

        currency = service_type.replace('deposit_crypto_', '')

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        asyncio.create_task(check_payment_background(order_id, currency, amount, user_id_order))

        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def add_money_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É\n–ü—Ä–∏–º–µ—Ä: /add_money 123456789 100")
        return

    try:
        target_user_id = int(context.args[0])
        amount = float(context.args[1])
        print("add_wallet amount to be added: ", amount)

        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return

        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –Ω–∞ —Å—É–º–º—É {amount}")
        success = add_money_to_wallet(target_user_id, amount, f"–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")

        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üí∞ **–ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω!**\n\nüíµ –°—É–º–º–∞: {amount:.2f} USD\n\nüéâ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

            await update.message.reply_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USD")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data

    if data == "catalog":
        await show_catalog(query)
    elif data == "wallet":
        await show_wallet(query)
    elif data == "orders":
        await show_orders(query)
    elif data == "help":
        await show_help(query)
    elif data == "admin" and user_id in ADMIN_IDS:
        await show_admin_panel(query)
    elif data.startswith("service_"):
        await handle_service_selection(query, data)
    elif data.startswith("back_"):
        await handle_back_button(query, data)
    elif data.startswith("order_"):
        await handle_order_selection(query, data)
    elif data.startswith("wallet_"):
        await handle_wallet_action(query, data)
    elif data.startswith("admin_"):
        await handle_admin_action(query, data)
    elif data.startswith("deposit_"):
        await handle_deposit_action(query, data)
    elif data.startswith("crypto_deposit_"):
        await handle_crypto_deposit_selection(query, data)


async def show_catalog(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥"""
    catalog_text = """
üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π", callback_data="service_payment")],
        # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—ã --
        [InlineKeyboardButton("üí∂ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—á—ë—Ç", callback_data="service_transfers")],
        [InlineKeyboardButton("üîß –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="service_other_services")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(catalog_text, reply_markup=reply_markup)


async def show_wallet(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    balance = get_user_wallet(user_id)

    wallet_text = f"""
üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫

üíµ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="wallet_deposit")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="wallet_history")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(wallet_text, reply_markup=reply_markup)


async def show_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    user_id = query.from_user.id
    try:
        orders = get_user_orders(user_id)

        if orders:
            orders_text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            for o in orders:
                orders_text += f"üîπ –ó–∞–∫–∞–∑ #{o['id']}\n"
                orders_text += f"   –£—Å–ª—É–≥–∞: {o['service_type']}\n"
                orders_text += f"   –°—É–º–º–∞: {o['amount']:.2f} USD\n"
                orders_text += f"   –°—Ç–∞—Ç—É—Å: {o['status']}\n"
                orders_text += f"   –î–∞—Ç–∞: {o['created_at']}\n\n"
        else:
            orders_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(orders_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_orders: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")


async def show_help(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥  
/wallet - –ú–æ–π –∫–æ—à–µ–ª–µ–∫
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã
‚Ä¢ –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏

üí∞ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: @myspacehelper
"""

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(help_text, reply_markup=reply_markup)


async def show_admin_panel(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    admin_text = """
üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="admin_wallets")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)


async def handle_service_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_type = data.replace("service_", "")

    if service_type == "transfers":
        await show_transfers(query)
    elif service_type == "payment":
        await show_payment_services(query)
    elif service_type == "other_services":
        await show_other_services(query)


async def show_transfers(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã"""
    transfers_text = """
üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:
"""

    keyboard = [
        [InlineKeyboardButton("üá™üá∫ –ü–µ—Ä–µ–≤–æ–¥—ã –≤ EC", callback_data="order_transfer_eu")],
        [InlineKeyboardButton("üá∫üá∏ –ü–µ—Ä–µ–≤–æ–¥—ã –≤ –°–®–ê", callback_data="order_transfer_us")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(transfers_text, reply_markup=reply_markup)


async def show_other_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""
    other_services_text = """
üîß –û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""

    keyboard = [
        [InlineKeyboardButton("üîß –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="order_other_services")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(other_services_text, reply_markup=reply_markup)


async def show_payment_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –æ–ø–ª–∞—Ç—ã –∑–∞—Ä—É–±–µ–∂–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    payment_services_text = """
üí≥ –û–ø–ª–∞—Ç–∞ –ª—é–±—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""

    keyboard = [
        [InlineKeyboardButton("ü§ñ ChatGPT Plus", callback_data="order_gpt")],
        [InlineKeyboardButton("üê¶ X / Twitter", callback_data="order_twitter")],
        [InlineKeyboardButton("üîç –î—Ä—É–≥–æ–µ", callback_data="order_other_services")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(payment_services_text, reply_markup=reply_markup)


async def handle_back_button(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    if data == "back_main":
        await show_main_menu(query)
    elif data == "back_catalog":
        await show_catalog(query)


async def show_main_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = query.from_user.id
    user = query.from_user

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    balance = get_user_wallet(user_id)

    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPACE PAY!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

    keyboard = [
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="catalog")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]

    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)


async def handle_order_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    service_type = data.replace("order_", "")
    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    service_info = get_service_info(service_type)

    if not service_info:
        await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_keyboard("back_catalog"))
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    service_text = f"""
üõí {service_info['name']}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service_info['description']}
üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {service_info['min_amount']} USD
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {service_info['commission']*100}%

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ USD):
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_amount',
        'service_type': service_type,
        'service_info': service_info
    }

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(service_text, reply_markup=reply_markup)


async def handle_wallet_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
    action = data.replace("wallet_", "")

    if action == "deposit":
        await show_deposit_options(query)
    elif action == "history":
        await show_wallet_history(query)


async def handle_admin_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
    action = data.replace("admin_", "")

    if action == "orders":
        await show_all_orders(query)
    elif action == "wallets":
        await show_wallets_management(query)
    elif action == "stats":
        await show_admin_stats(query)


async def handle_deposit_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    action = data.replace("deposit_", "")

    if action == "card":
        await show_card_deposit(query)
    elif action == "crypto":
        await show_crypto_deposit(query)


async def handle_crypto_deposit_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = query.from_user.id

    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: crypto_deposit_btc_100 -> currency=btc, amount=100
    # crypto_deposit_usdc_sol_100 -> currency=usdc_sol, amount=100
    parts = data.split('_')
    if len(parts) >= 4:
        if len(parts) == 5 and parts[3] == 'sol':
            # –î–ª—è USDC –∏ USDT –≤ —Å–µ—Ç–∏ Solana
            currency = f"{parts[2]}_{parts[3]}"  # usdc_sol, usdt_sol
            amount = float(parts[4])  # —Å—É–º–º–∞
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            currency = parts[2]  # btc, eth, usdt, sol
            amount = float(parts[3])  # —Å—É–º–º–∞

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        wallet_address = "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        crypto_amount = 0

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"crypto_checker: {crypto_checker}")
        logger.info(f"currency: {currency}")
        logger.info(f"amount: {amount}")

        if crypto_checker and hasattr(crypto_checker, 'wallets') and currency in crypto_checker.wallets:
            wallet_address = crypto_checker.wallets[currency]
            logger.info(f"wallet_address: {wallet_address}")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É
            try:
                crypto_amount = crypto_checker.calculate_crypto_amount(amount, currency)
                logger.info(f"crypto_amount: {crypto_amount}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {currency}: {e}")
                # Fallback —Ä–∞—Å—á–µ—Ç
                fallback_rates = {
                    'eth': 3000.0,
                    'usdt': 1.0,
                    'sol': 100.0,
                    'usdc_sol': 1.0,
                    'usdt_sol': 1.0,
                }
                rate = fallback_rates.get(currency, 1.0)
                crypto_amount = amount / rate if rate > 0 else 0
                logger.info(f"fallback crypto_amount: {crypto_amount}")
        else:
            logger.error(f"crypto_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –≤–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.error(f"crypto_checker: {crypto_checker}")
            logger.error(f"hasattr wallets: {hasattr(crypto_checker, 'wallets') if crypto_checker else False}")
            if crypto_checker and hasattr(crypto_checker, 'wallets'):
                logger.error(f"available currencies: {list(crypto_checker.wallets.keys())}")

            # Fallback –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
            fallback_wallets = {
                'eth': '0x12E450e53E1acD323B95e36636cB4927aC6C17eE',
                'usdt': '0x12E450e53E1acD323B95e36636cB4927aC6C17eE',
                'sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq',
                'usdc_sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq',
                'usdt_sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq'
            }

            if currency in fallback_wallets:
                wallet_address = fallback_wallets[currency]
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–¥—Ä–µ—Å: {wallet_address}")

                # Fallback —Ä–∞—Å—á–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                fallback_rates = {
                    'eth': 3000.0,
                    'usdt': 1.0,
                    'sol': 100.0,
                    'usdc_sol': 1.0,
                    'usdt_sol': 1.0,
                }
                rate = fallback_rates.get(currency, 1.0)
                crypto_amount = amount / rate if rate > 0 else 0
                logger.info(f"fallback crypto_amount: {crypto_amount}")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        currency_mapping = {
            'eth': 'ethereum',
            'usdt': 'tether',
            'sol': 'solana',
            'usdc_sol': 'usd-coin',
            'usdt_sol': 'tether'
        }

        coin_id = currency_mapping.get(currency, currency)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        current_price = 0
        if crypto_checker and hasattr(crypto_checker, 'get_crypto_price'):
            try:
                current_price = crypto_checker.get_crypto_price(coin_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {coin_id}: {e}")
                # Fallback –∫—É—Ä—Å—ã
                fallback_rates = {
                    'solana': 100.0,
                    'ethereum': 3000.0,
                    'tether': 1.0,
                    'usd-coin': 1.0,
                }
                current_price = fallback_rates.get(coin_id, 1.0)
        else:
            logger.error(f"crypto_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")
            # Fallback –∫—É—Ä—Å—ã
            fallback_rates = {
                'solana': 100.0,
                'ethereum': 3000.0,
                'tether': 1.0,
                'usd-coin': 1.0,
            }
            current_price = fallback_rates.get(coin_id, 1.0)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å –¥–ª—è {coin_id}: {current_price}")

        crypto_text = f"""
‚Çø **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency.upper()}**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

üìä **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:**
‚Ä¢ –ö—É—Ä—Å {currency.upper()}: ${current_price:.4f}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {crypto_amount:.6f} {currency.upper()}

üìù **–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
`{wallet_address}`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É: {crypto_amount:.6f} {currency.upper()}
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_id}
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @myspacehelper

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
        """

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        order_id = create_order(user_id, f'deposit_crypto_{currency}', amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency.upper()} {amount} USD")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(check_payment_background(order_id, currency, crypto_amount, user_id))

        keyboard = [
            [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')
        del user_states[user_id]
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        del user_states[user_id]


async def check_payment_background(order_id, currency, expected_amount, user_id):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)"""

    try:
        logger.info(f"–ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞, –≤–∞–ª—é—Ç–∞: {currency}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üîç **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ**\n\n"
                     f"üÜî –ó–∞–∫–∞–∑: {order_id}\n"
                     f"üí∞ –í–∞–ª—é—Ç–∞: {currency.upper()}\n"
                     f"üíµ –û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {expected_amount}\n"
                     f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n\n"
                     f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞!\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /check_payment {order_id}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ–∂–∏–¥–∞–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")


def get_service_info(service_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    services = {
        'transfer_eu': {
            'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'description': '–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤',
            'min_amount': 10,
            'commission': 0.08
        },
        'transfer_us': {
            'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'description': '–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤',
            'min_amount': 10,
            'commission': 0.08
        },
        'gpt': {
            'name': 'GPT',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ChatGPT Plus',
            'min_amount': 20,
            'commission': 0.08
        },
        'twitter': {
            'name': 'Twitter/X',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Twitter/X (Blue, Premium, Verified)',
            'min_amount': 8,
            'commission': 0.08
        },
        'other_services': {
            'name': '–û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
            'description': '–û–ø–ª–∞—Ç–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—Å–ª—É–≥',
            'min_amount': 10,
            'commission': 0.08
        }
    }

    return services.get(service_type)


def get_back_keyboard(back_action):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_action)]]
    return InlineKeyboardMarkup(keyboard)


async def show_deposit_options(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    deposit_text = """
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
"""

    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–≤–æ–¥ —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="deposit_card")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="deposit_crypto")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)


async def show_card_deposit(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π"""
    user_id = query.from_user.id

    card_text = f"""
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USD

üìù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_deposit_amount',
        'deposit_type': 'card'
    }

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(card_text, reply_markup=reply_markup)


async def show_crypto_deposit(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    user_id = query.from_user.id

    crypto_text = f"""
‚Çø –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USD

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:
‚Ä¢ Ethereum (ETH)
‚Ä¢ USDT (ERC-20)
‚Ä¢ Solana (SOL)
‚Ä¢ USDC (Solana Network)
‚Ä¢ USDT (Solana Network)

üìù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã
4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_deposit_amount',
        'deposit_type': 'crypto'
    }

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(crypto_text, reply_markup=reply_markup)


async def show_wallet_history(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Supabase"""
    user_id = query.from_user.id
    try:
        transactions = get_user_transactions(user_id)

        if transactions:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
            for t in transactions:
                emoji = "‚ûï" if t["amount"] > 0 else "‚ûñ"
                history_text += f"{emoji} {t['amount']:.2f} USD\n"
                history_text += f"   –¢–∏–ø: {t['transaction_type']}\n"
                history_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {t['description']}\n"
                history_text += f"   –î–∞—Ç–∞: {t['created_at']}\n\n"
        else:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(history_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_wallet_history: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")


async def show_all_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        orders = get_all_orders(limit=20)

        if orders:
            orders_text = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                order_id = order["id"]
                user_id = order["user_id"]
                service_type = order["service_type"]
                amount = order["amount"]
                status = order["status"]
                created_at = order["created_at"]
                # –ë–∞–ª–∞–Ω—Å –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã wallets
                balance = order.get("wallets", [{}])[0].get("balance", 0)

                orders_text += f"üîπ –ó–∞–∫–∞–∑ #{order_id}\n"
                orders_text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                orders_text += f"   –£—Å–ª—É–≥–∞: {service_type}\n"
                orders_text += f"   –°—É–º–º–∞: {amount:.2f} USD\n"
                orders_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                orders_text += f"   –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD\n"
                orders_text += f"   –î–∞—Ç–∞: {created_at}\n\n"
        else:
            orders_text = "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(orders_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")


async def show_wallets_management(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        wallets = get_top_wallets()

        if wallets:
            wallets_text = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:\n\n"
            for wallet in wallets:
                user_id = wallet["user_id"]
                balance = wallet["balance"]
                created_at = wallet["created_at"]

                wallets_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                wallets_text += f"   –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD\n"
                wallets_text += f"   –°–æ–∑–¥–∞–Ω: {created_at}\n\n"
        else:
            wallets_text = "üí∞ –ö–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(wallets_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤")


async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        stats = get_stats()
        users_count = stats["users_count"]
        orders_count = stats["orders_count"]
        total_amount = stats["total_amount"]
        total_balance = stats["total_balance"]

        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üìã –ó–∞–∫–∞–∑–æ–≤: {orders_count}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_amount:.2f} USD
üí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤: {total_balance:.2f} USD
"""

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(stats_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        state = user_states[user_id]

        if state['state'] == 'waiting_amount':
            await handle_amount_input(update, context, text, state)
        elif state['state'] == 'waiting_deposit_amount':
            await handle_deposit_amount_input(update, context, text, state)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            del user_states[user_id]
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")


async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
    user_id = update.effective_user.id

    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount = float(text.replace(',', '.'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        service_info = state['service_info']
        if amount < service_info['min_amount']:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {service_info['name']}: {service_info['min_amount']} USD\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
        is_crypto_payment = state['service_type'].startswith('crypto_')

        if is_crypto_payment:
            # –î–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            currency = state['service_type'].replace('crypto_', '')

            if crypto_checker:
                wallet_address = crypto_checker.wallets.get(currency, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')

                crypto_text = f"""
üí≥ **–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {currency.upper()}**

üí∞ –°—É–º–º–∞: {amount:.2f} USD
üõí –£—Å–ª—É–≥–∞: {service_info['name']}
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * service_info['commission']:.2f} USD
üí≥ –ò—Ç–æ–≥–æ: {amount + (amount * service_info['commission']):.2f} USD

üìù **–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
`{wallet_address}`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ {currency.upper()}
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
"""

                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
                order_id = create_order(user_id, state['service_type'], amount, f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {currency.upper()}")

                if order_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    try:
                        result = crypto_checker.check_payment(currency, amount, order_id)
                        if result['success']:
                            # –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                            if crypto_checker.process_payment(result):
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                _update_order_status_in_supabase(order_id, 'completed', ADMIN_ID, f'–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result["amount"]} {result["currency"]}')

                                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                                card_info = auto_issue_card(state['service_type'], amount, user_id)

                                success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

üí∞ –°—É–º–º–∞: {result['amount']} {result['currency'].upper()}
üÜî –ó–∞–∫–∞–∑: #{order_id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                                """

                                keyboard = [
                                    [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                                    [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                                ]
                                reply_markup = InlineKeyboardMarkup(keyboard)

                                await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
                                del user_states[user_id]
                                return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")

                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    keyboard = [
                        [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.message.reply_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')
                    del user_states[user_id]
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await update.message.reply_text("‚ùå –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                del user_states[user_id]
            return

        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_balance = get_user_wallet(user_id)
        total_cost = amount + (amount * service_info['commission'])

        if user_balance < total_cost:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!\n"
                f"üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_cost:.2f} USD\n"
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user_balance:.2f} USD\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ /wallet"
            )
            del user_states[user_id]
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        order_id = create_order(user_id, state['service_type'], amount, f"–ó–∞–∫–∞–∑ {service_info['name']}")

        if order_id:
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            success = update_wallet_balance(user_id, -total_cost, 'purchase', f'–ü–æ–∫—É–ø–∫–∞ {service_info["name"]}')

            if success:
                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                card_info = auto_issue_card(state['service_type'], amount, user_id)

                success_text = f"""
‚úÖ **–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!**

üí∞ –°—É–º–º–∞: {amount:.2f} USD
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * service_info['commission']:.2f} USD
üí≥ –ò—Ç–æ–≥–æ: {total_cost:.2f} USD
üÜî –ó–∞–∫–∞–∑: #{order_id}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                """

                keyboard = [
                    [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
                del user_states[user_id]
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                del user_states[user_id]
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del user_states[user_id]

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        del user_states[user_id]


async def handle_deposit_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    deposit_type = state['deposit_type']

    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount = float(text.replace(',', '.'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        min_amount = 10
        if amount < min_amount:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_amount} USD\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        if deposit_type == 'card':
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π
            deposit_text = f"""
üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

üìù **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
–ë–∞–Ω–∫: Tinkoff Bank
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2200 7004 XXXX XXXX
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_id}
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @myspacehelper

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
            """

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            order_id = create_order(user_id, 'deposit_card', amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π {amount} USD")

            keyboard = [
                [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(deposit_text, reply_markup=reply_markup, parse_mode='Markdown')
            del user_states[user_id]

        elif deposit_type == 'crypto':
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_text = f"""
‚Çø **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:
            """

            keyboard = [
                [InlineKeyboardButton("Ethereum (ETH)", callback_data=f"crypto_deposit_eth_{amount}")],
                [InlineKeyboardButton("USDT (ERC-20)", callback_data=f"crypto_deposit_usdt_{amount}")],
                [InlineKeyboardButton("Solana (SOL)", callback_data=f"crypto_deposit_sol_{amount}")],
                [InlineKeyboardButton("USDC (Solana)", callback_data=f"crypto_deposit_usdc_sol_{amount}")],
                [InlineKeyboardButton("USDT (Solana)", callback_data=f"crypto_deposit_usdt_sol_{amount}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_states[user_id] = {
                'state': 'waiting_crypto_selection',
                'deposit_amount': amount
            }

            await update.message.reply_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        del user_states[user_id]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
async def check_crypto_payments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Supabase –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""

    if not crypto_checker:
        logger.warning("–ö—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –∑–∞–∫–∞–∑—ã —Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Supabase
        pending_orders = get_pending_crypto_orders()

        for order in pending_orders:
            order_id = order["id"]
            user_id = order["user_id"]
            service_type = order["service_type"]
            amount = order["amount"]

            currency = service_type.replace("crypto_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
            result = crypto_checker.check_payment(currency, amount, order_id)

            if result["success"] and crypto_checker.process_payment(result):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Supabase
                update_order_status(
                    order_id,
                    "completed",
                    ADMIN_ID,
                    f'–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result["amount"]} {result["currency"]}'
                )

                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                card_info = auto_issue_card(service_type, amount, user_id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

üí∞ –°—É–º–º–∞: {result['amount']} {result['currency'].upper()}
üÜî –ó–∞–∫–∞–∑: #{order_id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                    """

                    await application.bot.send_message(
                        chat_id=user_id,
                        text=success_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if update:
        if update.effective_user:
            user_info = f"{update.effective_user.first_name} (ID: {update.effective_user.id})"
        elif update.callback_query and update.callback_query.from_user:
            user_info = f"{update.callback_query.from_user.first_name} (ID: {update.callback_query.from_user.id})"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
    if ADMIN_ID:
        try:
            error_text = f"‚ùå **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:**\n\n"
            error_text += f"üîç –î–µ—Ç–∞–ª–∏: {context.error}\n"
            error_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
            error_text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if update:
                if update.message:
                    error_text += f"\nüìù –¢–∏–ø: –°–æ–æ–±—â–µ–Ω–∏–µ"
                elif update.callback_query:
                    error_text += f"\nüìù –¢–∏–ø: Callback Query"
                    error_text += f"\nüîò –î–∞–Ω–Ω—ã–µ: {update.callback_query.data}"

            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=error_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    try:
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'status': 'online',
        'bot': 'Telegram Financial Bot',
        'version': '1.0.0',
        'environment': ENVIRONMENT,
        'timestamp': datetime.now().isoformat()
    })


@app.route('/health')
def health():
    """Health check –¥–ª—è Render"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })


@app.route('/stats')
def stats():
    try:
        stats_data = get_stats()
        return jsonify({
            "users_count": stats_data["users_count"],
            "orders_count": stats_data["orders_count"],
            "total_amount": stats_data["total_amount"],
            "total_balance": stats_data["total_balance"],
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è /stats: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    if request.method == "POST":
        try:
            update = Update.de_json(request.get_json(force=True), application.bot)

            # –°–æ–∑–¥–∞–µ–º event loop –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º update
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(application.process_update(update))
            finally:
                loop.close()

            return jsonify({"status": "ok"}), 200
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return jsonify({"error": str(e)}), 500


def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global application

    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)

    if not ADMIN_ID:
        logger.error("‚ùå ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        sys.exit(1)

    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Financial Bot...")
    logger.info(f"üìä –ü–æ—Ä—Ç: {PORT}")
    logger.info(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {ENVIRONMENT}")
    logger.info(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check_payment", check_payment_command))
    application.add_handler(CommandHandler("add_money", add_money_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_error_handler(error_handler)

    return application


async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è production"""
    webhook_url = f"{WEBHOOK_URL}/webhook"
    logger.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {webhook_url}")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤–µ–±—Ö—É–∫–∞
        await application.initialize()
        await application.bot.set_webhook(
            url=webhook_url,
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise


async def run_polling():
    """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    await application.initialize()
    await application.start()
    await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ!")
    logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    init_bot()

    if ENVIRONMENT == 'production':
        # Production —Ä–µ–∂–∏–º (Render) - –≤–µ–±—Ö—É–∫–∏
        if not WEBHOOK_URL:
            logger.error("‚ùå WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è production!")
            sys.exit(1)

        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ (–≤–µ–±—Ö—É–∫–∏)")

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        asyncio.run(setup_webhook())

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        app.run(host='0.0.0.0', port=PORT, debug=False)

    else:
        # Local —Ä–µ–∂–∏–º - polling
        logger.info("üñ•Ô∏è  –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")

        try:
            asyncio.run(run_polling())
        except KeyboardInterrupt:
            logger.info("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    main()