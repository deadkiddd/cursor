import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import Conflict, NetworkError, TimedOut
from flask import Flask, request, jsonify
import threading
import time
from datetime import datetime, timedelta
import json
import re
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
ADMIN_ID_2 = int(os.getenv('ADMIN_ID_2', 0))  # –í—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
OPERATOR_USERNAME = "@swiwell"
OPERATOR_USERNAME_2 = "@Deadkid"
PORT = int(os.getenv('PORT', 10000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_MESSAGE_LENGTH = 4096
RATE_LIMIT_MESSAGES = 60  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
RATE_LIMIT_WINDOW = 60  # —Å–µ–∫—É–Ω–¥

# –ö—ç—à –¥–ª—è rate limiting
user_message_times = {}

# –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª—É–≥
COMMISSION_RATES = {
    'netflix': 0.08,
    'steam': 0.08,
    'discord': 0.08,
    'spotify': 0.08,
    'youtube': 0.08,
    'twitch': 0.08,
    'apple_music': 0.08,
    'google_play': 0.08,
    'transfer_eu': 0.08,
    'transfer_us': 0.08,
    'crypto_btc': 0.08,
    'crypto_eth': 0.08,
    'crypto_usdt': 0.08
}

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
MIN_AMOUNTS = {
    'cards': 10,
    'transfers': 10,
    'crypto': 5
}

# –§–ª–∞–≥ –¥–ª—è graceful shutdown
shutdown_flag = False

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify({
        "status": "healthy", 
        "bot": "running",
        "timestamp": datetime.now().isoformat(),
        "uptime": get_uptime()
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    return jsonify({"status": "ok"})

@app.route('/stats', methods=['GET'])
def get_stats():
    return jsonify({
        "active_users": len(user_message_times),
        "timestamp": datetime.now().isoformat()
    })

@app.route('/restart', methods=['POST'])
def restart_bot():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global shutdown_flag
    shutdown_flag = True
    return jsonify({"status": "restarting"})

def start_flask():
    try:
        app.run(host='0.0.0.0', port=PORT, debug=False)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")

def get_uptime():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    if hasattr(get_uptime, 'start_time'):
        return str(datetime.now() - get_uptime.start_time)
    get_uptime.start_time = datetime.now()
    return "0:00:00"

def check_rate_limit(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_time = time.time()
    if user_id not in user_message_times:
        user_message_times[user_id] = []
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_message_times[user_id] = [
        msg_time for msg_time in user_message_times[user_id] 
        if current_time - msg_time < RATE_LIMIT_WINDOW
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if len(user_message_times[user_id]) >= RATE_LIMIT_MESSAGES:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_message_times[user_id].append(current_time)
    return True

def sanitize_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return ""
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'<[^>]+>', '', text)
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    return text[:MAX_MESSAGE_LENGTH]

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown"""
    if not text:
        return ""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown
    chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')
    return text

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, {})

def set_user_state(user_id, state_data):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_states[user_id] = state_data

def clear_user_state(user_id):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        del user_states[user_id]

def calculate_commission(service_type, amount):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
    - –î–ª—è —Å—É–º–º < $30 –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è $3
    - –î–ª—è —Å—É–º–º >= $30 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —Ç–∞—Ä–∏—Ñ—É
    """
    commission_rate = COMMISSION_RATES.get(service_type, 0.08)
    if amount < 30:
        commission = 3.0
        is_fixed = True
    else:
        commission = amount * commission_rate
        is_fixed = False
    total_amount = amount + commission
    return {
        'original_amount': amount,
        'commission_rate': commission_rate,
        'commission': commission,
        'total_amount': total_amount,
        'is_fixed': is_fixed
    }

def get_payment_address(service_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    addresses = {
        'cards': {
            'BTC': 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
            'ETH': '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
            'USDT_TRC20': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        },
        'transfers': {
            'BTC': 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
            'ETH': '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
            'USDT_TRC20': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        },
        'crypto': {
            'BTC': 'bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh',
            'ETH': '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
            'USDT_TRC20': 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t'
        }
    }
    return addresses.get(service_type, addresses['cards'])

async def send_admin_notification(context, title, user, additional_info=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if not ADMIN_ID:
        return
    
    try:
        message = f"{title}\n\n"
        message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
        message += f"üÜî ID: `{user.id}`\n"
        message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        if additional_info:
            message += f"\n\n{additional_info}"
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def send_admin_notification_to_all(context, title, user, additional_info=""):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    if not ADMIN_ID and not ADMIN_ID_2:
        return
    
    try:
        message = f"{title}\n\n"
        message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
        message += f"üÜî ID: `{user.id}`\n"
        message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        
        if additional_info:
            message += f"\n\n{additional_info}"
        
        if ADMIN_ID:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=message,
                parse_mode='Markdown'
            )
        if ADMIN_ID_2:
            await context.bot.send_message(
                chat_id=ADMIN_ID_2,
                text=message,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–æ–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not update.message:
        return
        
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await send_admin_notification_to_all(
        context, 
        "üÜï **–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!**", 
        user
    )
    
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ë–æ—Ç!**

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:
‚Ä¢ üí≥ **–û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏** (Netflix, Steam, Discord, Spotify –∏ –¥—Ä.)
‚Ä¢ üí∏ **–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∏ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã**
‚Ä¢ ‚Çø **–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç**: BTC, ETH, USDT (TRC20/ERC20)

üìã **–£—Å–ª–æ–≤–∏—è:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 5-15% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª—É–≥–∏
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 10-30 –º–∏–Ω—É—Ç
‚Ä¢ –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏", callback_data="payment_cards")],
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="transfers")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
    if not update.message:
        return

    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏", callback_data="payment_cards")],
        [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="transfers")],
        [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data="crypto")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
        [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not update.message:
        return
        
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/address - –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
/price - –ü—Ä–∞–π—Å-–ª–∏—Å—Ç

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é
2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –¥–µ—Ç–∞–ª–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
‚Ä¢ @swiwell - –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
‚Ä¢ @Deadkid - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 60 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: 4096 —Å–∏–º–≤–æ–ª–æ–≤
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def address_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /address"""
    if not update.message:
        return
        
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    address_text = f"""
üè¶ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**

**–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: 1234 5678 9012 3456
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 12/25
CVV: 123

**–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫:**
BTC: `bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh`
ETH: `0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6`
USDT (TRC20): `TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É —Å –≤–∞—à–∏–º Telegram ID: `{user.id}`

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è
"""
    
    await update.message.reply_text(address_text, parse_mode='Markdown')

async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /price"""
    if not update.message:
        return
        
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    price_text = """
üí∞ **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥:**

**üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏:**
‚Ä¢ Netflix: $15-50 (–∫–æ–º–∏—Å—Å–∏—è 10%)
‚Ä¢ Steam: $10-100 (–∫–æ–º–∏—Å—Å–∏—è 8%)
‚Ä¢ Discord Nitro: $10-20 (–∫–æ–º–∏—Å—Å–∏—è 12%)
‚Ä¢ Spotify: $10-15 (–∫–æ–º–∏—Å—Å–∏—è 15%)
‚Ä¢ YouTube Premium: $12-18 (–∫–æ–º–∏—Å—Å–∏—è 13%)
‚Ä¢ Twitch Subscriptions: $5-25 (–∫–æ–º–∏—Å—Å–∏—è 11%)

**üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã:**
‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 5-8% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 8-12% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10

**‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**
‚Ä¢ BTC: 3% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ ETH: 4% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ USDT: 2% –∫–æ–º–∏—Å—Å–∏—è

**‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** 10-30 –º–∏–Ω—É—Ç

**üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
"""
    await update.message.reply_text(price_text, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await query.edit_message_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    if query.data == "payment_cards":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
        set_user_state(user.id, {
            'state': 'selecting_service',
            'service_type': 'cards',
            'step': 'service_selection'
        })
        
        text = """
üí≥ **–û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –ø–æ–∫—É–ø–∫–∞–º–∏:**

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:

‚Ä¢ X (–±—ã–≤—à–∏–π Twitter) Premium / GPT
‚Ä¢ Netflix Premium
‚Ä¢ Steam Gift Cards
‚Ä¢ Spotify Premium
‚Ä¢ YouTube Premium
‚Ä¢ Discord Nitro
‚Ä¢ Apple Music / Google Play

üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1) –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å
2) –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É
3) –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ‚Äë—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
4) –ü–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–¥–∞–¥–∏–º –∫–∞—Ä—Ç—É/–æ–ø–ª–∞—Ç–∏–º —Ç–æ–≤–∞—Ä
"""
        keyboard = [
            [InlineKeyboardButton("üß† GPT / X Premium", callback_data="service_gptx")],
            [InlineKeyboardButton("üé¨ Netflix", callback_data="service_netflix")],
            [InlineKeyboardButton("üéÆ Steam", callback_data="service_steam")],
            [InlineKeyboardButton("üéµ Spotify", callback_data="service_spotify")],
            [InlineKeyboardButton("üì∫ YouTube", callback_data="service_youtube")],
            [InlineKeyboardButton("üïπ Discord Nitro", callback_data="service_discord")],
            [InlineKeyboardButton("üì± Apple Music", callback_data="service_apple_music")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif query.data == "transfers":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        set_user_state(user.id, {
            'state': 'selecting_transfer_type',
            'service_type': 'transfers',
            'step': 'transfer_type_selection'
        })
        
        text = """
üí∏ **–ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –∫–∞—Ä—Ç—ã:**

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:

**üåç –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã:**
‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–°–ï–ü–ê)
‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã

**üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞
2. –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –¥–µ—Ç–∞–ª–∏
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è

üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""
        keyboard = [
            [InlineKeyboardButton("üá™üá∫ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="transfer_eu")],
            [InlineKeyboardButton("üá∫üá∏ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã", callback_data="transfer_us")],
            [InlineKeyboardButton("üåç –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã", callback_data="transfer_other")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif query.data == "crypto":
        # –ü—Ä–∏—ë–º –æ–ø–ª–∞—Ç—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
        set_user_state(user.id, {
            'state': 'crypto_info',
            'service_type': 'crypto',
            'step': 'show_addresses'
        })
        
        payment_addresses = get_payment_address('crypto')
        text = f"""
‚Çø **–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:**

–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –≤:
‚Ä¢ BTC
‚Ä¢ ETH
‚Ä¢ USDT (TRC20)

**–†–µ–∫–≤–∏–∑–∏—Ç—ã:**
BTC: `{payment_addresses['BTC']}`
ETH: `{payment_addresses['ETH']}`
USDT (TRC20): `{payment_addresses['USDT_TRC20']}`

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∂–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —É—Å–ª—É–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: GPT/X Premium).
–ö–æ–º–∏—Å—Å–∏—è: 8% (–¥–ª—è —Å—É–º–º < $30 ‚Äî —Ñ–∏–∫—Å $3).
"""
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    elif query.data == "contact_operator":
        text = f"""
üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:**

–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:

**–û—Å–Ω–æ–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä:** @swiwell
**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:** @Deadkid

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ:
‚Ä¢ –í–∞—à Telegram ID: `{user.id}`
‚Ä¢ –í—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
‚Ä¢ –°—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏

–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 5-15 –º–∏–Ω—É—Ç

üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ
"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")],
            [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—Ä–æ—Å–µ —Å–≤—è–∑–∏
        await send_admin_notification_to_all(
            context,
            "üìû **–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å!**",
            user
        )
        
    elif query.data == "price_list":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º
        price_text = """
üí∞ **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥:**

**üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞—Ä—É–±–µ–∂–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏:**
‚Ä¢ Netflix: $15-50 (–∫–æ–º–∏—Å—Å–∏—è 10%)
‚Ä¢ Steam: $10-100 (–∫–æ–º–∏—Å—Å–∏—è 8%)
‚Ä¢ Discord Nitro: $10-20 (–∫–æ–º–∏—Å—Å–∏—è 12%)
‚Ä¢ Spotify: $10-15 (–∫–æ–º–∏—Å—Å–∏—è 15%)
‚Ä¢ YouTube Premium: $12-18 (–∫–æ–º–∏—Å—Å–∏—è 13%)
‚Ä¢ Twitch Subscriptions: $5-25 (–∫–æ–º–∏—Å—Å–∏—è 11%)

**üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã:**
‚Ä¢ –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 5-8% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: 8-12% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: $10

**‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:**
‚Ä¢ BTC: 3% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ ETH: 4% –∫–æ–º–∏—Å—Å–∏—è
‚Ä¢ USDT: 2% –∫–æ–º–∏—Å—Å–∏—è

**‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:** 10-30 –º–∏–Ω—É—Ç

**üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=price_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    elif query.data == "back_to_menu":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏", callback_data="payment_cards")],
            [InlineKeyboardButton("üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="transfers")],
            [InlineKeyboardButton("‚Çø –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data="crypto")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="price_list")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:",
            reply_markup=reply_markup
        )
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∫–∞—Ä—Ç
    elif query.data.startswith("service_"):
        service_name = query.data.replace("service_", "")
        current_state = get_user_state(user.id)
        current_state['selected_service'] = service_name
        current_state['state'] = 'entering_amount'
        current_state['step'] = 'amount_input'
        set_user_state(user.id, current_state)
        
        service_names = {
            'gptx': 'GPT / X Premium',
            'netflix': 'Netflix Premium',
            'steam': 'Steam Gift Cards',
            'discord': 'Discord Nitro',
            'spotify': 'Spotify Premium',
            'youtube': 'YouTube Premium',
            'apple_music': 'Apple Music'
        }
        
        service_display_name = service_names.get(service_name, service_name.title())
        commission_rate = 0.08
        
        text = f"""
üí≥ **{service_display_name}**

–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: **{service_display_name}**
–ö–æ–º–∏—Å—Å–∏—è: **8%** (–¥–ª—è —Å—É–º–º < $30 ‚Äî —Ñ–∏–∫—Å $3)

üí∞ **–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:**
(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['cards']})

–ü—Ä–∏–º–µ—Ä: `15` –∏–ª–∏ `25.50`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–µ—Ä–≤–∏—Å–∞", callback_data="payment_cards")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    elif query.data.startswith("transfer_"):
        transfer_type = query.data.replace("transfer_", "")
        current_state = get_user_state(user.id)
        current_state['selected_transfer_type'] = transfer_type
        current_state['state'] = 'entering_transfer_details'
        current_state['step'] = 'transfer_details_input'
        set_user_state(user.id, current_state)
        
        transfer_names = {
            'eu': '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–°–ï–ü–ê)',
            'us': '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'other': '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã'
        }
        
        transfer_display_name = transfer_names.get(transfer_type, transfer_type.upper())
        commission_rate = COMMISSION_RATES.get(f'transfer_{transfer_type}', 0.10)
        
        text = f"""
üí∏ **{transfer_display_name}**

–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø: **{transfer_display_name}**
–ö–æ–º–∏—Å—Å–∏—è: **{commission_rate * 100}%**

üí∞ **–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:**
(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['transfers']})

–ü—Ä–∏–º–µ—Ä: `50` –∏–ª–∏ `100.25`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞", callback_data="transfers")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    elif query.data.startswith("crypto_"):
        crypto_type = query.data.replace("crypto_", "")
        current_state = get_user_state(user.id)
        current_state['selected_crypto'] = crypto_type
        current_state['state'] = 'entering_crypto_amount'
        current_state['step'] = 'crypto_amount_input'
        set_user_state(user.id, current_state)
        
        crypto_names = {
            'btc': 'Bitcoin (BTC)',
            'eth': 'Ethereum (ETH)',
            'usdt': 'USDT (TRC20/ERC20)'
        }
        
        crypto_display_name = crypto_names.get(crypto_type, crypto_type.upper())
        commission_rate = COMMISSION_RATES.get(f'crypto_{crypto_type}', 0.08)
        
        text = f"""
‚Çø **{crypto_display_name}**

–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: **{crypto_display_name}**
–ö–æ–º–∏—Å—Å–∏—è: **{commission_rate * 100}%**

üí∞ **–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö:**
(–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['crypto']})

–ü—Ä–∏–º–µ—Ä: `100` –∏–ª–∏ `250.75`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="crypto")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message:
        return
        
    user = update.effective_user
    chat_id = update.effective_chat.id
    message_text = sanitize_text(update.message.text)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = get_user_state(user.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–∫–∞–∑–∞
    if current_state.get('state') == 'entering_amount':
        await handle_amount_input(update, context, message_text, current_state)
        return
    elif current_state.get('state') == 'entering_transfer_details':
        await handle_transfer_amount_input(update, context, message_text, current_state)
        return
    elif current_state.get('state') == 'entering_crypto_amount':
        await handle_crypto_amount_input(update, context, message_text, current_state)
        return
    
    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ADMIN_ID and chat_id != ADMIN_ID:
        try:
            safe_text = escape_markdown(message_text)
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n"
                     f"üë§ {user.first_name} (@{user.username or '–±–µ–∑ username'})\n"
                     f"üÜî ID: `{user.id}`\n"
                     f"üìù –¢–µ–∫—Å—Ç: {safe_text}\n"
                     f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(word in message_text.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ']):
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥.")
    elif any(word in message_text.lower() for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'price', '–ø—Ä–∞–π—Å']):
        await price_command(update, context)
    elif any(word in message_text.lower() for word in ['–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞']):
        await help_command(update, context)
    elif any(word in message_text.lower() for word in ['—Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–∞–¥—Ä–µ—Å', 'address']):
        await address_command(update, context)
    elif any(word in message_text.lower() for word in ['—Å—Ç–∞—Ç—É—Å', 'status']):
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + get_uptime())
    else:
        await update.message.reply_text(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @swiwell"
        )

async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str, current_state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫–∞—Ä—Ç"""
    user = update.effective_user
    
    try:
        amount = float(message_text)
        if amount < MIN_AMOUNTS['cards']:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['cards']}")
            return
            
        selected_service = current_state.get('selected_service')
        service_names = {
            'netflix': 'Netflix Premium',
            'steam': 'Steam Gift Cards',
            'discord': 'Discord Nitro',
            'spotify': 'Spotify Premium',
            'youtube': 'YouTube Premium',
            'apple_music': 'Apple Music'
        }
        service_display_name = service_names.get(selected_service, selected_service.title())
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        calculation = calculate_commission(selected_service, amount)
        
        commission_line = (f"–ö–æ–º–∏—Å—Å–∏—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è $3.00): ${calculation['commission']:.2f}" if calculation['is_fixed']
                           else f"–ö–æ–º–∏—Å—Å–∏—è ({calculation['commission_rate']*100}%): ${calculation['commission']:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state['amount'] = amount
        current_state['calculation'] = calculation
        current_state['state'] = 'payment_ready'
        set_user_state(user.id, current_state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_addresses = get_payment_address('cards')
        
        text = f"""
üí≥ **–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ!**

**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –°–µ—Ä–≤–∏—Å: {service_display_name}
‚Ä¢ –°—É–º–º–∞: ${amount:.2f}
‚Ä¢ {commission_line}
‚Ä¢ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${calculation['total_amount']:.2f}**

**üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
"""
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await send_admin_notification_to_all(
            context,
            f"üí≥ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞—Ä—Ç—ã!**",
            user,
            f"–°–µ—Ä–≤–∏—Å: {service_display_name}\n"
            f"–°—É–º–º–∞: ${amount:.2f}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: ${calculation['commission']:.2f}\n"
            f"–ò—Ç–æ–≥–æ: ${calculation['total_amount']:.2f}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15 –∏–ª–∏ 25.50)")

async def handle_transfer_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str, current_state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
    user = update.effective_user
    
    try:
        amount = float(message_text)
        if amount < MIN_AMOUNTS['transfers']:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['transfers']}")
            return
            
        selected_transfer_type = current_state.get('selected_transfer_type')
        transfer_names = {
            'eu': '–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–°–ï–ü–ê)',
            'us': '–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'other': '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã'
        }
        transfer_display_name = transfer_names.get(selected_transfer_type, selected_transfer_type.upper())
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        calculation = calculate_commission(f'transfer_{selected_transfer_type}', amount)
        
        commission_line = (f"–ö–æ–º–∏—Å—Å–∏—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è $3.00): ${calculation['commission']:.2f}" if calculation['is_fixed']
                           else f"–ö–æ–º–∏—Å—Å–∏—è ({calculation['commission_rate']*100}%): ${calculation['commission']:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state['amount'] = amount
        current_state['calculation'] = calculation
        current_state['state'] = 'transfer_payment_ready'
        set_user_state(user.id, current_state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_addresses = get_payment_address('transfers')
        
        text = f"""
üí∏ **–ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ!**

**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –¢–∏–ø: {transfer_display_name}
‚Ä¢ –°—É–º–º–∞: ${amount:.2f}
‚Ä¢ {commission_line}
‚Ä¢ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${calculation['total_amount']:.2f}**

**üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
"""
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await send_admin_notification_to_all(
            context,
            f"üí∏ **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–æ–¥–∞!**",
            user,
            f"–¢–∏–ø: {transfer_display_name}\n"
            f"–°—É–º–º–∞: ${amount:.2f}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: ${calculation['commission']:.2f}\n"
            f"–ò—Ç–æ–≥–æ: ${calculation['total_amount']:.2f}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∏–ª–∏ 100.25)")

async def handle_crypto_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str, current_state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    user = update.effective_user
    
    try:
        amount = float(message_text)
        if amount < MIN_AMOUNTS['crypto']:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNTS['crypto']}")
            return
            
        selected_crypto = current_state.get('selected_crypto')
        crypto_names = {
            'btc': 'Bitcoin (BTC)',
            'eth': 'Ethereum (ETH)',
            'usdt': 'USDT (TRC20/ERC20)'
        }
        crypto_display_name = crypto_names.get(selected_crypto, selected_crypto.upper())
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        calculation = calculate_commission(f'crypto_{selected_crypto}', amount)
        
        commission_line = (f"–ö–æ–º–∏—Å—Å–∏—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è $3.00): ${calculation['commission']:.2f}" if calculation['is_fixed']
                           else f"–ö–æ–º–∏—Å—Å–∏—è ({calculation['commission_rate']*100}%): ${calculation['commission']:.2f}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state['amount'] = amount
        current_state['calculation'] = calculation
        current_state['state'] = 'crypto_payment_ready'
        set_user_state(user.id, current_state)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_addresses = get_payment_address('crypto')
        
        text = f"""
‚Çø **–ó–∞–∫–∞–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ!**

**üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_display_name}
‚Ä¢ –°—É–º–º–∞: ${amount:.2f}
‚Ä¢ {commission_line}
‚Ä¢ **–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: ${calculation['total_amount']:.2f}**

**üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
"""
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", callback_data="contact_operator")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await send_admin_notification_to_all(
            context,
            f"‚Çø **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã!**",
            user,
            f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_display_name}\n"
            f"–°—É–º–º–∞: ${amount:.2f}\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: ${calculation['commission']:.2f}\n"
            f"–ò—Ç–æ–≥–æ: ${calculation['total_amount']:.2f}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 250.75)")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    error = context.error
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if isinstance(error, Conflict):
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        return
    elif isinstance(error, (NetworkError, TimedOut)):
        logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {error}")
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
        return
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
    if (ADMIN_ID or ADMIN_ID_2) and not isinstance(error, (Conflict, NetworkError, TimedOut)):
        try:
            error_text = str(error)[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—à–∏–±–∫–∏
            safe_error = escape_markdown(error_text)
            error_message = f"‚ùå **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:**\n\nüîç –î–µ—Ç–∞–ª–∏: {safe_error}\nüìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            
            if ADMIN_ID:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=error_message,
                    parse_mode='Markdown'
                )
            if ADMIN_ID_2:
                await context.bot.send_message(
                    chat_id=ADMIN_ID_2,
                    text=error_message,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global shutdown_flag
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    shutdown_flag = True
    sys.exit(0)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global shutdown_flag
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not ADMIN_ID and not ADMIN_ID_2:
        logger.warning("ADMIN_ID –∏ ADMIN_ID_2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=start_flask, daemon=True)
    flask_thread.start()
    
    max_retries = 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    retry_count = 0
    
    while retry_count < max_retries and not shutdown_flag:
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            application.add_handler(CommandHandler("start", start_command))
            application.add_handler(CommandHandler("menu", menu_command))
            application.add_handler(CommandHandler("help", help_command))
            application.add_handler(CommandHandler("address", address_command))
            application.add_handler(CommandHandler("price", price_command))
            application.add_handler(CallbackQueryHandler(button_callback))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
            application.add_error_handler(error_handler)
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info(f"–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})...")
            application.run_polling(
                allowed_updates=Update.ALL_TYPES, 
                drop_pending_updates=True,
                close_loop=False,
                read_timeout=30,
                write_timeout=30,
                connect_timeout=30,
                pool_timeout=30,
                timeout=30
            )
            
        except Conflict as e:
            logger.warning(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞: {e}")
            retry_count += 1
            if retry_count < max_retries:
                wait_time = min(30, retry_count * 10)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            continue
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            retry_count += 1
            if retry_count < max_retries:
                wait_time = min(60, retry_count * 15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                time.sleep(wait_time)
            else:
                logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                break
    
    if shutdown_flag:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    else:
        logger.error("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.")

if __name__ == '__main__':
    main()
