#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–∞–π–ª –¥–ª—è –¥–µ–ø–ª–æ—è –Ω–∞ Render.com
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç webhook –∏ polling —Ä–µ–∂–∏–º—ã
"""

import os
import logging
import asyncio
import tempfile
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from flask import Flask, request, jsonify
from datetime import datetime
import signal
import threading
from crypto_checker import auto_issue_card
from supabase import create_client, Client


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if os.path.exists(lock_file):
            with open(lock_file, 'r') as f:
                pid = f.read().strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            try:
                os.kill(int(pid), 0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
                print(f"‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {pid})")
                print("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
                sys.exit(1)
            except OSError:
                # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                os.remove(lock_file)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        with open(lock_file, 'w') as f:
            f.write(str(os.getpid()))
            
        print(f"‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω (PID: {os.getpid()})")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [ADMIN_ID]  # –û–¥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
OPERATOR_USERNAME = "@myspacehelper"
PORT = int(os.getenv('PORT', 10000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"TELEGRAM_BOT_TOKEN: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELEGRAM_BOT_TOKEN else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
print(f"ADMIN_ID: {ADMIN_ID if ADMIN_ID else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
print(f"PORT: {PORT}")

# –ö—ç—à –¥–ª—è rate limiting
user_message_times = {}

# –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä–∞
crypto_checker = None


# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)


SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_SECRET = os.getenv("SUPABASE_API_SECRET")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_API_SECRET)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_wallet(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        existing = supabase.table("wallets").select("balance").eq("user_id", user_id).execute()
        if existing.data:
            return float(existing.data[0]["balance"])
        else:
            supabase.table("wallets").insert({"user_id": user_id, "balance": 0.0}).execute()
            return 0.0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
        return 0.0


def get_or_create_wallet(user_id, username=None, first_name=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    try:
        wallet = supabase.table("wallets").select("*").eq("user_id", user_id).execute()
        if wallet.data:
            w = wallet.data[0]
            return {
                "user_id": w["user_id"],
                "username": w.get("username"),
                "first_name": w.get("first_name"),
                "balance": float(w.get("balance", 0.0)),
                "created_at": w.get("created_at"),
                "updated_at": w.get("updated_at")
            }
        else:
            now_iso = datetime.now().isoformat()
            supabase.table("wallets").insert({
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "balance": 0.0,
                "created_at": now_iso,
                "updated_at": now_iso
            }).execute()
            return {
                "user_id": user_id,
                "username": username,
                "first_name": first_name,
                "balance": 0.0,
                "created_at": now_iso,
                "updated_at": now_iso
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ get_or_create_wallet: {e}")
        return None


def update_wallet_balance(user_id, amount, transaction_type, description):
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        supabase.table("wallets").update({
            "balance": f"balance + {amount}",
            "updated_at": datetime.now().isoformat()
        }).eq("user_id", user_id).execute()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        supabase.table("wallet_transactions").insert({
            "user_id": user_id,
            "amount": amount,
            "transaction_type": transaction_type,
            "description": description,
            "created_at": datetime.now().isoformat()
        }).execute()

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
        return False


def add_money_to_wallet(user_id, amount, description):
    """–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –≤ –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª–µ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        get_or_create_wallet(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        success = update_wallet_balance(user_id, amount, 'deposit', description)

        if success:
            logger.info(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USD")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ add_money_to_wallet: {e}")
        return False


def create_order(user_id, service_type, amount, description):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Supabase"""
    try:
        order_resp = supabase.table("orders").insert({
            "user_id": user_id,
            "service_type": service_type,
            "amount": amount,
            "status": "pending",
            "description": description,
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }).execute()
        order_id = order_resp.data[0]["id"]

        supabase.table("order_status_history").insert({
            "order_id": order_id,
            "status": "pending",
            "notes": "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω",
            "created_at": datetime.now().isoformat()
        }).execute()
        return order_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return None


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message:
        logger.error("start_command –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return
    
    user = update.effective_user
    user_id = user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    balance = get_user_wallet(user_id)
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPACE PAY!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="catalog")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥  
/wallet - –ú–æ–π –∫–æ—à–µ–ª–µ–∫
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/check_payment - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (–∞–¥–º–∏–Ω—ã)

üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã
‚Ä¢ –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏

üí∞ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: @myspacehelper
"""
    
    await update.message.reply_text(help_text)


async def check_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) —á–µ—Ä–µ–∑ Supabase"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞\n–ü—Ä–∏–º–µ—Ä: /check_payment 123")
        return

    try:
        order_id = int(context.args[0])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ Supabase
        order_resp = supabase.table("orders")\
            .select("user_id, service_type, amount, status, description")\
            .eq("id", order_id)\
            .execute()

        if not order_resp.data:
            await update.message.reply_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        order = order_resp.data[0]
        user_id_order = order["user_id"]
        service_type = order["service_type"]
        amount = order["amount"]
        status = order["status"]
        description = order["description"]

        if not service_type.startswith('deposit_crypto_'):
            await update.message.reply_text("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏–ø—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            return

        currency = service_type.replace('deposit_crypto_', '')

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
        await update.message.reply_text(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        asyncio.create_task(check_payment_background(order_id, currency, amount, user_id_order))

        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def add_money_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É\n–ü—Ä–∏–º–µ—Ä: /add_money 123456789 100")
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = float(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
        
        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫
        success = add_money_to_wallet(target_user_id, amount, f"–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")
        
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                from telegram import Bot
                bot = Bot(token=TELEGRAM_BOT_TOKEN)
                await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üí∞ **–ö–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω!**\n\nüíµ –°—É–º–º–∞: {amount:.2f} USD\n\nüéâ –í–∞—à –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            await update.message.reply_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount:.2f} USD")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    data = query.data
    
    if data == "catalog":
        await show_catalog(query)
    elif data == "wallet":
        await show_wallet(query)
    elif data == "orders":
        await show_orders(query)
    elif data == "help":
        await show_help(query)
    elif data == "admin" and user_id in ADMIN_IDS:
        await show_admin_panel(query)
    elif data.startswith("service_"):
        await handle_service_selection(query, data)
    elif data.startswith("back_"):
        await handle_back_button(query, data)
    elif data.startswith("order_"):
        await handle_order_selection(query, data)
    elif data.startswith("wallet_"):
        await handle_wallet_action(query, data)
    elif data.startswith("admin_"):
        await handle_admin_action(query, data)
    elif data.startswith("deposit_"):
        await handle_deposit_action(query, data)
    elif data.startswith("crypto_deposit_"):
        await handle_crypto_deposit_selection(query, data)


async def show_catalog(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥"""
    catalog_text = """
üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
"""
    
    keyboard = [
        [InlineKeyboardButton("ü§ñ GPT", callback_data="service_gpt")],
        [InlineKeyboardButton("üê¶ Twitter/X", callback_data="service_twitter")],
        [InlineKeyboardButton("üîß –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="service_other_services")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(catalog_text, reply_markup=reply_markup)


async def show_wallet(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    balance = get_user_wallet(user_id)
    
    wallet_text = f"""
üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫

üíµ –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="wallet_deposit")],
        [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è", callback_data="wallet_history")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(wallet_text, reply_markup=reply_markup)


async def show_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase"""
    user_id = query.from_user.id
    try:
        orders = supabase.table("orders")\
            .select("id, service_type, amount, status, created_at")\
            .eq("user_id", user_id)\
            .order("created_at", desc=True)\
            .limit(10).execute().data

        if orders:
            orders_text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
            for o in orders:
                orders_text += f"üîπ –ó–∞–∫–∞–∑ #{o['id']}\n"
                orders_text += f"   –£—Å–ª—É–≥–∞: {o['service_type']}\n"
                orders_text += f"   –°—É–º–º–∞: {o['amount']:.2f} USD\n"
                orders_text += f"   –°—Ç–∞—Ç—É—Å: {o['status']}\n"
                orders_text += f"   –î–∞—Ç–∞: {o['created_at']}\n\n"
        else:
            orders_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(orders_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_orders: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")


async def show_help(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥  
/wallet - –ú–æ–π –∫–æ—à–µ–ª–µ–∫
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ –∫–∞—Ä—Ç—ã
‚Ä¢ –î—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏

üí∞ –û–ø–ª–∞—Ç–∞:
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
‚Ä¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: @myspacehelper
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(help_text, reply_markup=reply_markup)


async def show_admin_panel(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    admin_text = """
üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
        [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏", callback_data="admin_wallets")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(admin_text, reply_markup=reply_markup)


async def handle_service_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_type = data.replace("service_", "")
    
    if service_type == "subscriptions":
        await show_subscriptions(query)
    elif service_type == "transfers":
        await show_transfers(query)
    elif service_type == "crypto":
        await show_crypto(query)
    elif service_type == "gpt":
        await show_gpt_services(query)
    elif service_type == "twitter":
        await show_twitter_services(query)
    elif service_type == "other_services":
        await show_other_services(query)


async def show_subscriptions(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
    subscriptions_text = """
üé¨ –ü–æ–¥–ø–∏—Å–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:
"""
    
    keyboard = [
        [InlineKeyboardButton("Netflix", callback_data="order_netflix")],
        [InlineKeyboardButton("Steam", callback_data="order_steam")],
        [InlineKeyboardButton("Discord", callback_data="order_discord")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(subscriptions_text, reply_markup=reply_markup)


async def show_transfers(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã"""
    transfers_text = """
üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–µ–≤–æ–¥–∞:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–≤–æ–¥—ã", callback_data="order_transfer")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(transfers_text, reply_markup=reply_markup)


async def show_crypto(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    crypto_text = """
‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("Ethereum (ETH)", callback_data="order_crypto_eth")],
        [InlineKeyboardButton("USDT", callback_data="order_crypto_usdt")],
        [InlineKeyboardButton("Solana (SOL)", callback_data="order_crypto_sol")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(crypto_text, reply_markup=reply_markup)


async def show_other_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""
    other_services_text = """
üîß –û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("üîß –î—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã", callback_data="order_other_services")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(other_services_text, reply_markup=reply_markup)


async def show_gpt_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ GPT"""
    gpt_services_text = """
ü§ñ GPT —Å–µ—Ä–≤–∏—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("ü§ñ GPT", callback_data="order_gpt")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(gpt_services_text, reply_markup=reply_markup)


async def show_twitter_services(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ Twitter/X"""
    twitter_services_text = """
üê¶ Twitter/X —Å–µ—Ä–≤–∏—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:
"""
    
    keyboard = [
        [InlineKeyboardButton("üê¶ Twitter/X", callback_data="order_twitter")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(twitter_services_text, reply_markup=reply_markup)

async def handle_back_button(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""
    if data == "back_main":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await show_main_menu(query)
    elif data == "back_catalog":
        await show_catalog(query)

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = query.from_user.id
    user = query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
    balance = get_user_wallet(user_id)
    
    welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SPACE PAY!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}
üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {balance:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥", callback_data="catalog")],
        [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    if user_id in ADMIN_IDS:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(welcome_text, reply_markup=reply_markup)

async def handle_order_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    service_type = data.replace("order_", "")
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    service_info = get_service_info(service_type)
    
    if not service_info:
        await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=get_back_keyboard("back_catalog"))
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    service_text = f"""
üõí {service_info['name']}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service_info['description']}
üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {service_info['min_amount']} USD
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {service_info['commission']*100}%

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (–≤ USD):
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_amount',
        'service_type': service_type,
        'service_info': service_info
    }
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_catalog")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(service_text, reply_markup=reply_markup)

async def handle_wallet_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ—à–µ–ª—å–∫–æ–º"""
    action = data.replace("wallet_", "")
    
    if action == "deposit":
        await show_deposit_options(query)
    elif action == "history":
        await show_wallet_history(query)

async def handle_admin_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –¥–µ–π—Å—Ç–≤–∏–π"""
    action = data.replace("admin_", "")
    
    if action == "orders":
        await show_all_orders(query)
    elif action == "wallets":
        await show_wallets_management(query)
    elif action == "stats":
        await show_admin_stats(query)


async def handle_deposit_action(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    action = data.replace("deposit_", "")
    
    if action == "card":
        await show_card_deposit(query)
    elif action == "crypto":
        await show_crypto_deposit(query)


async def handle_crypto_deposit_selection(query, data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    global crypto_checker
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: crypto_deposit_btc_100 -> currency=btc, amount=100
    # crypto_deposit_usdc_sol_100 -> currency=usdc_sol, amount=100
    parts = data.split('_')
    if len(parts) >= 4:
        if len(parts) == 5 and parts[3] == 'sol':
            # –î–ª—è USDC –∏ USDT –≤ —Å–µ—Ç–∏ Solana
            currency = f"{parts[2]}_{parts[3]}"  # usdc_sol, usdt_sol
            amount = float(parts[4])  # —Å—É–º–º–∞
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            currency = parts[2]  # btc, eth, usdt, sol
            amount = float(parts[3])  # —Å—É–º–º–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        wallet_address = "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        crypto_amount = 0
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"crypto_checker: {crypto_checker}")
        logger.info(f"currency: {currency}")
        logger.info(f"amount: {amount}")
        
        if crypto_checker and hasattr(crypto_checker, 'wallets') and currency in crypto_checker.wallets:
            wallet_address = crypto_checker.wallets[currency]
            logger.info(f"wallet_address: {wallet_address}")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É
            try:
                crypto_amount = crypto_checker.calculate_crypto_amount(amount, currency)
                logger.info(f"crypto_amount: {crypto_amount}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ {currency}: {e}")
                # Fallback —Ä–∞—Å—á–µ—Ç
                fallback_rates = {
                    'eth': 3000.0,
                    'usdt': 1.0,
                    'sol': 100.0,
                    'usdc_sol': 1.0,
                    'usdt_sol': 1.0,
                }
                rate = fallback_rates.get(currency, 1.0)
                crypto_amount = amount / rate if rate > 0 else 0
                logger.info(f"fallback crypto_amount: {crypto_amount}")
        else:
            logger.error(f"crypto_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –≤–∞–ª—é—Ç–∞ {currency} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            logger.error(f"crypto_checker: {crypto_checker}")
            logger.error(f"hasattr wallets: {hasattr(crypto_checker, 'wallets') if crypto_checker else False}")
            if crypto_checker and hasattr(crypto_checker, 'wallets'):
                logger.error(f"available currencies: {list(crypto_checker.wallets.keys())}")
            
            # Fallback –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
            fallback_wallets = {
                'eth': '0x12E450e53E1acD323B95e36636cB4927aC6C17eE',
                'usdt': '0x12E450e53E1acD323B95e36636cB4927aC6C17eE',
                'sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq',
                'usdc_sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq',
                'usdt_sol': '6s8bjsP5K3hvdj3bca4FxW8W6CqqSLH26aufVALTJbBq'
            }
            
            if currency in fallback_wallets:
                wallet_address = fallback_wallets[currency]
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–¥—Ä–µ—Å: {wallet_address}")
                
                # Fallback —Ä–∞—Å—á–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                fallback_rates = {
                    'eth': 3000.0,
                    'usdt': 1.0,
                    'sol': 100.0,
                    'usdc_sol': 1.0,
                    'usdt_sol': 1.0,
                }
                rate = fallback_rates.get(currency, 1.0)
                crypto_amount = amount / rate if rate > 0 else 0
                logger.info(f"fallback crypto_amount: {crypto_amount}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
        currency_mapping = {
            'eth': 'ethereum',
            'usdt': 'tether',
            'sol': 'solana',
            'usdc_sol': 'usd-coin',
            'usdt_sol': 'tether'
        }
        
        coin_id = currency_mapping.get(currency, currency)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
        current_price = 0
        if crypto_checker and hasattr(crypto_checker, 'get_crypto_price'):
            try:
                current_price = crypto_checker.get_crypto_price(coin_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ {coin_id}: {e}")
                # Fallback –∫—É—Ä—Å—ã
                fallback_rates = {
                    'solana': 100.0,
                    'ethereum': 3000.0,
                    'tether': 1.0,
                    'usd-coin': 1.0,
                }
                current_price = fallback_rates.get(coin_id, 1.0)
        else:
            logger.error(f"crypto_checker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞")
            # Fallback –∫—É—Ä—Å—ã
            fallback_rates = {
                'solana': 100.0,
                'ethereum': 3000.0,
                'tether': 1.0,
                'usd-coin': 1.0,
            }
            current_price = fallback_rates.get(coin_id, 1.0)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å –¥–ª—è {coin_id}: {current_price}")
        
        crypto_text = f"""
‚Çø **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency.upper()}**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

üìä **–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:**
‚Ä¢ –ö—É—Ä—Å {currency.upper()}: ${current_price:.4f}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {crypto_amount:.6f} {currency.upper()}

üìù **–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
`{wallet_address}`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É: {crypto_amount:.6f} {currency.upper()}
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_id}
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @myspacehelper

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
        """
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        order_id = create_order(user_id, f'deposit_crypto_{currency}', amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency.upper()} {amount} USD")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(check_payment_background(order_id, currency, crypto_amount, user_id))
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')
        del user_states[user_id]
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        del user_states[user_id]


async def check_payment_background(order_id, currency, expected_amount, user_id):
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    global crypto_checker
    
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –≤–∞–ª—é—Ç–∞: {currency}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        for attempt in range(10):  # 10 –ø–æ–ø—ã—Ç–æ–∫
            await asyncio.sleep(6)  # –ñ–¥–µ–º 6 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            
            if crypto_checker and hasattr(crypto_checker, 'check_payment'):
                try:
                    result = crypto_checker.check_payment(currency, expected_amount, order_id)
                    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
                    
                    if result.get('success'):
                        # –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω!
                        amount = result.get('amount', expected_amount)
                        
                        # –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        success = add_money_to_wallet(user_id, amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {currency.upper()}")
                        
                        if success:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                            _update_order_status_in_supabase(order_id, 'completed', ADMIN_ID, f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result.get('tx_hash', 'N/A')}")
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            try:
                                from telegram import Bot
                                bot = Bot(token=TELEGRAM_BOT_TOKEN)
                                await bot.send_message(
                                    chat_id=user_id,
                                    text=f"‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\nüí∞ –°—É–º–º–∞: {amount:.6f} {currency.upper()}\nüí≥ –ó–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: {amount:.2f} USD\n\nüéâ –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω!"
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                            
                            logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                            return
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    else:
                        logger.info(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            else:
                logger.error("crypto_checker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
                break
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        logger.warning(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from telegram import Bot
            bot = Bot(token=TELEGRAM_BOT_TOKEN)
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è **–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n–ó–∞–∫–∞–∑: {order_id}\n–í–∞–ª—é—Ç–∞: {currency}\n–û–∂–∏–¥–∞–µ–º–∞—è —Å—É–º–º–∞: {expected_amount}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é!"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

def get_service_info(service_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ"""
    services = {
        'netflix': {
            'name': 'Netflix Premium',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Netflix Premium —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ 4K –∫–æ–Ω—Ç–µ–Ω—Ç—É',
            'min_amount': 10,
            'commission': 0.08
        },
        'steam': {
            'name': 'Steam Gift Cards',
            'description': '–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã Steam –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–≥—Ä',
            'min_amount': 10,
            'commission': 0.08
        },
        'discord': {
            'name': 'Discord Nitro',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∞ Discord Nitro —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏',
            'min_amount': 10,
            'commission': 0.08
        },
        'spotify': {
            'name': 'Spotify Premium',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∞ Spotify Premium –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã',
            'min_amount': 10,
            'commission': 0.08
        },
        'youtube': {
            'name': 'YouTube Premium',
            'description': 'YouTube Premium —Å —Ñ–æ–Ω–æ–≤—ã–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º',
            'min_amount': 10,
            'commission': 0.08
        },
        'transfer_eu': {
            'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'description': '–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤',
            'min_amount': 50,
            'commission': 0.08
        },
        'transfer_us': {
            'name': '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–∞—Ä—Ç—ã',
            'description': '–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—ã –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö –±–∞–Ω–∫–æ–≤',
            'min_amount': 50,
            'commission': 0.08
        },
        'crypto_eth': {
            'name': 'Ethereum (ETH)',
            'description': '–ü–æ–∫—É–ø–∫–∞ Ethereum —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂',
            'min_amount': 5,
            'commission': 0.08
        },
        'crypto_usdt': {
            'name': 'USDT (Ethereum)',
            'description': '–ü–æ–∫—É–ø–∫–∞ USDT —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂',
            'min_amount': 5,
            'commission': 0.08
        },

        'crypto_sol': {
            'name': 'Solana (SOL)',
            'description': '–ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ Solana',
            'min_amount': 5,
            'commission': 0.08
        },
        'gpt': {
            'name': 'GPT',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ GPT —Å–µ—Ä–≤–∏—Å—ã (ChatGPT Plus, Pro, API)',
            'min_amount': 20,
            'commission': 0.08
        },
        'twitter': {
            'name': 'Twitter/X',
            'description': '–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Twitter/X (Blue, Premium, Verified)',
            'min_amount': 8,
            'commission': 0.08
        },
        'other_services': {
            'name': '–û–ø–ª–∞—Ç–∞ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
            'description': '–û–ø–ª–∞—Ç–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—Å–ª—É–≥',
            'min_amount': 10,
            'commission': 0.08
        }
    }
    
    return services.get(service_type)

def get_back_keyboard(back_action):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_action)]]
    return InlineKeyboardMarkup(keyboard)

async def show_deposit_options(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    deposit_text = """
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="deposit_card")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="deposit_crypto")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(deposit_text, reply_markup=reply_markup)


async def show_card_deposit(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π"""
    user_id = query.from_user.id
    
    card_text = f"""
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USD

üìù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
3. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_deposit_amount',
        'deposit_type': 'card'
    }
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(card_text, reply_markup=reply_markup)

async def show_crypto_deposit(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    user_id = query.from_user.id
    
    crypto_text = f"""
‚Çø –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π

üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 USD

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:
‚Ä¢ Ethereum (ETH)
‚Ä¢ USDT (ERC-20)
‚Ä¢ Solana (SOL)
‚Ä¢ USDC (Solana Network)
‚Ä¢ USDT (Solana Network)

üìù –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ–ø–ª–∞—Ç—ã
4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD):
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {
        'state': 'waiting_deposit_amount',
        'deposit_type': 'crypto'
    }
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(crypto_text, reply_markup=reply_markup)


async def show_wallet_history(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Supabase"""
    user_id = query.from_user.id
    try:
        transactions = supabase.table("wallet_transactions")\
            .select("*")\
            .eq("user_id", user_id)\
            .order("created_at", desc=True)\
            .limit(10).execute().data

        if transactions:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
            for t in transactions:
                emoji = "‚ûï" if t["amount"] > 0 else "‚ûñ"
                history_text += f"{emoji} {t['amount']:.2f} USD\n"
                history_text += f"   –¢–∏–ø: {t['transaction_type']}\n"
                history_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {t['description']}\n"
                history_text += f"   –î–∞—Ç–∞: {t['created_at']}\n\n"
        else:
            history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(history_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ show_wallet_history: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")


async def show_all_orders(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Supabase
        orders_resp = supabase.table("orders")\
            .select("id, user_id, service_type, amount, status, created_at, wallets(balance)")\
            .order("created_at", desc=True)\
            .limit(20)\
            .execute()

        orders = orders_resp.data

        if orders:
            orders_text = "üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                order_id = order["id"]
                user_id = order["user_id"]
                service_type = order["service_type"]
                amount = order["amount"]
                status = order["status"]
                created_at = order["created_at"]
                # –ë–∞–ª–∞–Ω—Å –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã wallets
                balance = order.get("wallets", [{}])[0].get("balance", 0)

                orders_text += f"üîπ –ó–∞–∫–∞–∑ #{order_id}\n"
                orders_text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                orders_text += f"   –£—Å–ª—É–≥–∞: {service_type}\n"
                orders_text += f"   –°—É–º–º–∞: {amount:.2f} USD\n"
                orders_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
                orders_text += f"   –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD\n"
                orders_text += f"   –î–∞—Ç–∞: {created_at}\n\n"
        else:
            orders_text = "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(orders_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")


async def show_wallets_management(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏, —Å–æ—Ä—Ç–∏—Ä—É—è –ø–æ –±–∞–ª–∞–Ω—Å—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        wallets_resp = supabase.table("wallets")\
            .select("user_id, balance, created_at")\
            .order("balance", desc=True)\
            .limit(10)\
            .execute()

        wallets = wallets_resp.data

        if wallets:
            wallets_text = "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:\n\n"
            for wallet in wallets:
                user_id = wallet["user_id"]
                balance = wallet["balance"]
                created_at = wallet["created_at"]

                wallets_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                wallets_text += f"   –ë–∞–ª–∞–Ω—Å: {balance:.2f} USD\n"
                wallets_text += f"   –°–æ–∑–¥–∞–Ω: {created_at}\n\n"
        else:
            wallets_text = "üí∞ –ö–æ—à–µ–ª—å–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(wallets_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤")


async def show_admin_stats(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∞–¥–º–∏–Ω) —á–µ—Ä–µ–∑ Supabase"""
    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_resp = supabase.table("wallets").select("user_id", count="exact").execute()
        users_count = users_resp.count or 0

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        orders_resp = supabase.table("orders").select("id", count="exact").execute()
        orders_count = orders_resp.count or 0

        # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤
        total_amount_resp = supabase.table("orders").select("amount").execute()
        total_amount = sum(order["amount"] for order in total_amount_resp.data) if total_amount_resp.data else 0

        # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
        total_balance_resp = supabase.table("wallets").select("balance").execute()
        total_balance = sum(wallet["balance"] for wallet in total_balance_resp.data) if total_balance_resp.data else 0

        stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üìã –ó–∞–∫–∞–∑–æ–≤: {orders_count}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_amount:.2f} USD
üí≥ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–æ–≤: {total_balance:.2f} USD
"""

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(stats_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        state = user_states[user_id]
        
        if state['state'] == 'waiting_amount':
            await handle_amount_input(update, context, text, state)
        elif state['state'] == 'waiting_deposit_amount':
            await handle_deposit_amount_input(update, context, text, state)
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            del user_states[user_id]
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")


async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
    user_id = update.effective_user.id
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount = float(text.replace(',', '.'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        service_info = state['service_info']
        if amount < service_info['min_amount']:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è {service_info['name']}: {service_info['min_amount']} USD\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
        is_crypto_payment = state['service_type'].startswith('crypto_')
        
        if is_crypto_payment:
            # –î–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            currency = state['service_type'].replace('crypto_', '')
            global crypto_checker
            
            if crypto_checker:
                wallet_address = crypto_checker.wallets.get(currency, '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
                
                crypto_text = f"""
üí≥ **–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {currency.upper()}**

üí∞ –°—É–º–º–∞: {amount:.2f} USD
üõí –£—Å–ª—É–≥–∞: {service_info['name']}
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * service_info['commission']:.2f} USD
üí≥ –ò—Ç–æ–≥–æ: {amount + (amount * service_info['commission']):.2f} USD

üìù **–ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
`{wallet_address}`

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É –≤ {currency.upper()}
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
"""
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
                order_id = create_order(user_id, state['service_type'], amount, f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {currency.upper()}")
                
                if order_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                    try:
                        result = crypto_checker.check_payment(currency, amount, order_id)
                        if result['success']:
                            # –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                            if crypto_checker.process_payment(result):
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                _update_order_status_in_supabase(order_id, 'completed', ADMIN_ID, f'–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result["amount"]} {result["currency"]}')
                                
                                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                                card_info = auto_issue_card(state['service_type'], amount, user_id)
                                
                                success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

üí∞ –°—É–º–º–∞: {result['amount']} {result['currency'].upper()}
üÜî –ó–∞–∫–∞–∑: #{order_id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                                """
                                
                                keyboard = [
                                    [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                                    [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                                ]
                                reply_markup = InlineKeyboardMarkup(keyboard)
                                
                                await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
                                del user_states[user_id]
                                return
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")
                    
                    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    keyboard = [
                        [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')
                    del user_states[user_id]
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            else:
                await update.message.reply_text("‚ùå –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                del user_states[user_id]
            return
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user_balance = get_user_wallet(user_id)
        total_cost = amount + (amount * service_info['commission'])
        
        if user_balance < total_cost:
            await update.message.reply_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ!\n"
                f"üí∞ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_cost:.2f} USD\n"
                f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user_balance:.2f} USD\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —á–µ—Ä–µ–∑ /wallet"
            )
            del user_states[user_id]
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        order_id = create_order(user_id, state['service_type'], amount, f"–ó–∞–∫–∞–∑ {service_info['name']}")
        
        if order_id:
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            success = update_wallet_balance(user_id, -total_cost, 'purchase', f'–ü–æ–∫—É–ø–∫–∞ {service_info["name"]}')
            
            if success:
                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                card_info = auto_issue_card(state['service_type'], amount, user_id)
                
                success_text = f"""
‚úÖ **–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!**

üí∞ –°—É–º–º–∞: {amount:.2f} USD
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {amount * service_info['commission']:.2f} USD
üí≥ –ò—Ç–æ–≥–æ: {total_cost:.2f} USD
üÜî –ó–∞–∫–∞–∑: #{order_id}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                """
                
                keyboard = [
                    [InlineKeyboardButton("üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="catalog")],
                    [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(success_text, reply_markup=reply_markup, parse_mode='Markdown')
                del user_states[user_id]
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                del user_states[user_id]
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            del user_states[user_id]
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        del user_states[user_id]


async def handle_deposit_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, state: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    deposit_type = state['deposit_type']
    
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
        amount = float(text.replace(',', '.'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        min_amount = 10
        if amount < min_amount:
            await update.message.reply_text(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {min_amount} USD\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        if deposit_type == 'card':
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π
            deposit_text = f"""
üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

üìù **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**
–ë–∞–Ω–∫: Tinkoff Bank
–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 2200 7004 XXXX XXXX
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {user_id}
‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @myspacehelper

‚è∞ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...
            """
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            order_id = create_order(user_id, 'deposit_card', amount, f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π {amount} USD")
            
            keyboard = [
                [InlineKeyboardButton("üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(deposit_text, reply_markup=reply_markup, parse_mode='Markdown')
            del user_states[user_id]
            
        elif deposit_type == 'crypto':
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_text = f"""
‚Çø **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π**

üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount:.2f} USD

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:
            """
            
            keyboard = [
                [InlineKeyboardButton("Ethereum (ETH)", callback_data=f"crypto_deposit_eth_{amount}")],
                [InlineKeyboardButton("USDT (ERC-20)", callback_data=f"crypto_deposit_usdt_{amount}")],
                [InlineKeyboardButton("Solana (SOL)", callback_data=f"crypto_deposit_sol_{amount}")],
                [InlineKeyboardButton("USDC (Solana)", callback_data=f"crypto_deposit_usdc_sol_{amount}")],
                [InlineKeyboardButton("USDT (Solana)", callback_data=f"crypto_deposit_usdt_sol_{amount}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="wallet_deposit")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            user_states[user_id] = {
                'state': 'waiting_crypto_selection',
                'deposit_amount': amount
            }
            
            await update.message.reply_text(crypto_text, reply_markup=reply_markup, parse_mode='Markdown')
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50.5)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        del user_states[user_id]


# Internal helper functions for Supabase operations (replacing external API endpoints)
def _get_orders_from_supabase():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        orders_resp = supabase.table("orders").select("id,user_id,service_type,amount,status,created_at").order("created_at", desc=True).execute()
        orders_data = orders_resp.data or []

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–∂–¥–æ–≥–æ
        user_ids = [order["user_id"] for order in orders_data]
        wallets_resp = supabase.table("wallets").select("user_id,balance").in_("user_id", user_ids).execute()
        wallets_data = {w["user_id"]: w["balance"] for w in wallets_resp.data} if wallets_resp.data else {}

        orders_list = []
        for order in orders_data:
            orders_list.append({
                'id': order["id"],
                'user_id': order["user_id"],
                'service_type': order["service_type"],
                'amount': order["amount"],
                'status': order["status"],
                'created_at': order["created_at"],
                'user_balance': wallets_data.get(order["user_id"], 0)
            })

        return orders_list

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        return []

def _get_order_from_supabase(order_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order_resp = supabase.table("orders").select("*").eq("id", order_id).single().execute()
        order = order_resp.data

        if not order:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wallet_resp = supabase.table("wallets").select("balance").eq("user_id", order["user_id"]).single().execute()
        balance = wallet_resp.data["balance"] if wallet_resp.data else 0

        return {
            'id': order["id"],
            'user_id': order["user_id"],
            'service_type': order["service_type"],
            'amount': order["amount"],
            'status': order["status"],
            'description': order.get("description"),
            'created_at': order["created_at"],
            'updated_at': order["updated_at"],
            'user_balance': balance
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return None

def _update_order_status_in_supabase(order_id, new_status, admin_id, notes=''):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        supabase.table("orders").update({
            "status": new_status,
            "updated_at": datetime.now().isoformat()
        }).eq("id", order_id).execute()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        supabase.table("order_status_history").insert({
            "order_id": order_id,
            "status": new_status,
            "admin_id": admin_id,
            "notes": notes,
            "created_at": datetime.now().isoformat()
        }).execute()

        logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}' –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return False

def _get_wallet_info_from_supabase(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ –∏–∑ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        wallet_resp = supabase.table("wallets").select("balance, created_at").eq("user_id", user_id).single().execute()
        wallet = wallet_resp.data

        if not wallet:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions_resp = supabase.table("wallet_transactions").select("id", count="exact").eq("user_id", user_id).execute()
        transactions_count = transactions_resp.count or 0

        return {
            'user_id': user_id,
            'balance': wallet['balance'],
            'created_at': wallet['created_at'],
            'transactions_count': transactions_count
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

def _deposit_wallet_in_supabase(user_id, amount, admin_id):
    """–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        if not amount or amount <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        wallet_resp = supabase.table("wallets").select("balance").eq("user_id", user_id).single().execute()
        wallet = wallet_resp.data

        if not wallet:
            logger.error(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        new_balance = wallet['balance'] + amount

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        supabase.table("wallets").update({"balance": new_balance, "updated_at": datetime.now().isoformat()}).eq("user_id", user_id).execute()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        supabase.table("wallet_transactions").insert({
            "user_id": user_id,
            "amount": amount,
            "transaction_type": "deposit",
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}",
            "created_at": datetime.now().isoformat()
        }).execute()

        logger.info(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} USD –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def _withdraw_wallet_in_supabase(user_id, amount, admin_id):
    """–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –≤ Supabase (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    try:
        if not amount or amount <= 0:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {amount}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        wallet_resp = supabase.table("wallets").select("balance").eq("user_id", user_id).single().execute()
        wallet = wallet_resp.data

        if not wallet:
            logger.error(f"–ö–æ—à–µ–ª–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        current_balance = wallet['balance']
        if current_balance < amount:
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞: {current_balance} < {amount}")
            return False

        new_balance = current_balance - amount

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        supabase.table("wallets").update({"balance": new_balance, "updated_at": datetime.now().isoformat()}).eq("user_id", user_id).execute()

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        supabase.table("wallet_transactions").insert({
            "user_id": user_id,
            "amount": -amount,
            "transaction_type": "withdraw",
            "description": f"–í—ã–≤–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}",
            "created_at": datetime.now().isoformat()
        }).execute()

        logger.info(f"–ò–∑ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤—ã–≤–µ–¥–µ–Ω–æ {amount} USD –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        'status': 'online',
        'bot': 'Telegram Financial Bot',
        'version': '1.0.0',
        'timestamp': datetime.now().isoformat()
    })


@app.route('/health')
def health():
    """Health check –¥–ª—è Render"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat()
    })


@app.route('/stats')
def stats():
    try:
        users_count = supabase.table("wallets").select("user_id").execute().count
        orders_count = supabase.table("orders").select("id").execute().count
        total_amount_resp = supabase.table("orders").select("amount").execute()
        total_amount = sum([o["amount"] for o in total_amount_resp.data])

        return jsonify({
            "users_count": users_count,
            "orders_count": orders_count,
            "total_amount": total_amount,
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# API –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ Supabase - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _get_orders_from_supabase()


# GET /admin/order/{id} - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _get_order_from_supabase()


# POST /admin/order/{id}/status - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _update_order_status_in_supabase()


# GET /admin/wallet/{user_id} - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _get_wallet_info_from_supabase()


# POST /admin/wallet/{user_id}/deposit - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _deposit_wallet_in_supabase()


# POST /admin/wallet/{user_id}/withdraw - –£–î–ê–õ–ï–ù–û
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ _withdraw_wallet_in_supabase()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
async def check_crypto_payments():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Supabase –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global crypto_checker

    if not crypto_checker:
        logger.warning("–ö—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –∑–∞–∫–∞–∑—ã —Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Supabase
        pending_resp = supabase.table("orders")\
            .select("id, user_id, service_type, amount")\
            .eq("status", "pending")\
            .like("service_type", "crypto_%")\
            .execute()

        pending_orders = pending_resp.data or []

        for order in pending_orders:
            order_id = order["id"]
            user_id = order["user_id"]
            service_type = order["service_type"]
            amount = order["amount"]

            currency = service_type.replace("crypto_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂
            result = crypto_checker.check_payment(currency, amount, order_id)

            if result["success"] and crypto_checker.process_payment(result):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Supabase
                supabase.table("orders").update({
                    "status": "completed",
                    "updated_at": datetime.now().isoformat()
                }).eq("id", order_id).execute()

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
                supabase.table("order_status_history").insert({
                    "order_id": order_id,
                    "status": "completed",
                    "admin_id": ADMIN_ID,
                    "notes": f'–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {result["amount"]} {result["currency"]}',
                    "created_at": datetime.now().isoformat()
                }).execute()

                # –í—ã–¥–∞–µ–º –∫–∞—Ä—Ç—É
                card_info = auto_issue_card(service_type, amount, user_id)

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    from telegram.ext import Application
                    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

                    success_text = f"""
‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**

üí∞ –°—É–º–º–∞: {result['amount']} {result['currency'].upper()}
üÜî –ó–∞–∫–∞–∑: #{order_id}
üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

üé´ **–í–∞—à–∞ –∫–∞—Ä—Ç–∞:**
–ù–æ–º–µ—Ä: {card_info['card_number']}
–°—Ä–æ–∫: {card_info['expiry']}
CVV: {card_info['cvv']}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
                    """

                    await app.bot.send_message(
                        chat_id=user_id,
                        text=success_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if update:
        if update.effective_user:
            user_info = f"{update.effective_user.first_name} (ID: {update.effective_user.id})"
        elif update.callback_query and update.callback_query.from_user:
            user_info = f"{update.callback_query.from_user.first_name} (ID: {update.callback_query.from_user.id})"
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
    if ADMIN_ID:
        try:
            error_text = f"‚ùå **–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:**\n\n"
            error_text += f"üîç –î–µ—Ç–∞–ª–∏: {context.error}\n"
            error_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
            error_text += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if update:
                if update.message:
                    error_text += f"\nüìù –¢–∏–ø: –°–æ–æ–±—â–µ–Ω–∏–µ"
                elif update.callback_query:
                    error_text += f"\nüìù –¢–∏–ø: Callback Query"
                    error_text += f"\nüîò –î–∞–Ω–Ω—ã–µ: {update.callback_query.data}"
            
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=error_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    try:
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    check_single_instance() # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞

    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        sys.exit(1)
    
    if not ADMIN_ID:
        print("‚ùå ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram Financial Bot...")
    print(f"üìä –ü–æ—Ä—Ç: {PORT}")
    print(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä
    global crypto_checker
    try:
        from crypto_checker import SimpleCryptoChecker
        crypto_checker = SimpleCryptoChecker()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hasattr(crypto_checker, 'get_crypto_price') and hasattr(crypto_checker, 'calculate_crypto_amount'):
            print("‚úÖ –ö—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: {list(crypto_checker.wallets.keys())}")
        else:
            print("‚ö†Ô∏è –ö—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –º–µ—Ç–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            crypto_checker = None
    except ImportError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ crypto_checker_simple: {e}")
        crypto_checker = None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ—á–µ–∫–µ—Ä–∞: {e}")
        crypto_checker = None
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("check_payment", check_payment_command))
    application.add_handler(CommandHandler("add_money", add_money_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        try:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            lock_file = os.path.join(tempfile.gettempdir(), 'telegram_bot.lock')
            if os.path.exists(lock_file):
                os.remove(lock_file)
                print("‚úÖ –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_flask():
        app.run(host='0.0.0.0', port=PORT, debug=False)
    
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    print(f"üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üîç –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        signal_handler(signal.SIGINT, None)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        signal_handler(signal.SIGTERM, None)


if __name__ == '__main__':
    main()

